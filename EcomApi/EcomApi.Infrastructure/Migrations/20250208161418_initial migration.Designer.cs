// <auto-generated />
using System;
using EcomApi.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcomApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250208161418_initial migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcomApi.Domain.Models.Address", b =>
                {
                    b.Property<int>("Adress_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Adress_Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Postal_Code")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("Adress_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.Order", b =>
                {
                    b.Property<int>("Order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Order_Id"));

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payment_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strip_session_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("Order_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.OrderProduct", b =>
                {
                    b.Property<int>("Order_Id")
                        .HasColumnType("int");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int>("Order_Qty")
                        .HasColumnType("int");

                    b.Property<double>("Unite_Price")
                        .HasColumnType("float");

                    b.HasKey("Order_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ordersProducts");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.ProductCategory", b =>
                {
                    b.Property<int>("Category_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category_Id"));

                    b.Property<string>("Image_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category_Id");

                    b.ToTable("productsCategories");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.User", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strip_Cust_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.UserProduct", b =>
                {
                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CartCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quntity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("cartUpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("User_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("usersProducts");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product_Id"));

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Image_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Product_Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.Address", b =>
                {
                    b.HasOne("EcomApi.Domain.Models.User", "User")
                        .WithMany("addresses")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.Order", b =>
                {
                    b.HasOne("EcomApi.Domain.Models.User", "User")
                        .WithMany("orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.OrderProduct", b =>
                {
                    b.HasOne("EcomApi.Domain.Models.Order", "order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EcomApi.Domain.Models.product", "product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.UserProduct", b =>
                {
                    b.HasOne("EcomApi.Domain.Models.product", "product")
                        .WithMany("UserProducts")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EcomApi.Domain.Models.User", "user")
                        .WithMany("UserProducts")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.product", b =>
                {
                    b.HasOne("EcomApi.Domain.Models.ProductCategory", "productCategory")
                        .WithMany("products")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("productCategory");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.ProductCategory", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.User", b =>
                {
                    b.Navigation("UserProducts");

                    b.Navigation("addresses");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("EcomApi.Domain.Models.product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("UserProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
